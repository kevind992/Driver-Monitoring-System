{"version":3,"sources":["../../../src/@ionic-native/plugins/bluetooth-serial/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name Bluetooth Serial\n * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino (not Android to Android or iOS to iOS).\n * @usage\n * ```typescript\n * import { BluetoothSerial } from '@ionic-native/bluetooth-serial';\n *\n * constructor(private bluetoothSerial: BluetoothSerial) { }\n *\n *\n * // Write a string\n * this.bluetoothSerial.write('hello world').then(success, failure);\n *\n * // Array of int or bytes\n * this.bluetoothSerial.write([186, 220, 222]).then(success, failure);\n *\n * // Typed Array\n * var data = new Uint8Array(4);\n * data[0] = 0x41;\n * data[1] = 0x42;\n * data[2] = 0x43;\n * data[3] = 0x44;\n * this.bluetoothSerial.write(data).then(success, failure);\n *\n * // Array Buffer\n * this.bluetoothSerial.write(data.buffer).then(success, failure);\n * ```\n */\n@Plugin({\n  pluginName: 'BluetoothSerial',\n  repo: 'https://github.com/don/BluetoothSerial',\n  plugin: 'cordova-plugin-bluetooth-serial',\n  pluginRef: 'bluetoothSerial',\n  platforms: ['Android', 'iOS', 'Windows Phone 8']\n})\n\nexport class BluetoothSerial extends IonicNativePlugin {\n\n  /**\n   * Connect to a Bluetooth device\n   * @param {string} macAddress_or_uuid Identifier of the remote device\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'disconnect'\n  })\n  connect(macAddress_or_uuid: string): Observable<any> { return; }\n\n  /**\n   * Connect insecurely to a Bluetooth device\n   * @param {string} macAddress Identifier of the remote device\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    observable: true,\n    clearFunction: 'disconnect'\n  })\n  connectInsecure(macAddress: string): Observable<any> { return; }\n\n  /**\n   * Disconnect from the connected device\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  disconnect(): Promise<any> { return; }\n\n  /**\n   * Writes data to the serial port\n   * @param {any} data ArrayBuffer of data\n   * @returns {Promise<any>} returns a promise when data has been written\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  write(data: any): Promise<any> { return; }\n\n  /**\n   * Gets the number of bytes of data available\n   * @returns {Promise<any>} returns a promise that contains the available bytes\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  }) available(): Promise<any> { return; }\n\n  /**\n   * Reads data from the buffer\n   * @returns {Promise<any>} returns a promise with data from the buffer\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  read(): Promise<any> { return; }\n\n  /**\n   * Reads data from the buffer until it reaches a delimiter\n   * @param {string} delimiter string that you want to search until\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  readUntil(delimiter: string): Promise<any> { return; }\n\n  /**\n   * Subscribe to be notified when data is received\n   * @param {string} delimiter the string you want to watch for\n   * @returns {Observable<any>} returns an observable.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'unsubscribe'\n  })\n  subscribe(delimiter: string): Observable<any> { return; }\n\n  /**\n   * Subscribe to be notified when data is received\n   * @returns {Observable<any>} returns an observable\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'unsubscribeRawData'\n  })\n  subscribeRawData(): Observable<any> { return; }\n\n  /**\n   * Clears data in buffer\n   * @returns {Promise<any>} returns a promise when completed\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  clear(): Promise<any> { return; }\n\n  /**\n   * Lists bonded devices\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  list(): Promise<any> { return; }\n\n  /**\n   * Reports if bluetooth is enabled\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  isEnabled(): Promise<any> { return; }\n\n  /**\n   * Reports the connection status\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  isConnected(): Promise<any> { return; }\n\n  /**\n   * Reads the RSSI from the connected peripheral\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  readRSSI(): Promise<any> { return; }\n\n  /**\n   * Show the Bluetooth settings on the device\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  showBluetoothSettings(): Promise<any> { return; }\n\n  /**\n   * Enable Bluetooth on the device\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  enable(): Promise<any> { return; }\n\n  /**\n   * Discover unpaired devices\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  discoverUnpaired(): Promise<any> { return; }\n\n  /**\n   * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.\n   * @returns {Observable<any>} Returns an observable\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'clearDeviceDiscoveredListener'\n  })\n  setDeviceDiscoveredListener(): Observable<any> { return; }\n\n  /**\n   * Sets the human readable device name that is broadcasted to other devices\n   * @param {string} newName Desired name of device\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true\n  })\n  setName(newName: string): void { }\n\n  /**\n   * Makes the device discoverable by other devices\n   * @param {number} discoverableDuration Desired number of seconds device should be discoverable for\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true\n  })\n  setDiscoverable(discoverableDuration: number): void { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}